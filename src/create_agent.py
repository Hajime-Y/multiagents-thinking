from smolagents import tool, CodeAgent, LiteLLMModel
import re
import asyncio
import concurrent.futures

@tool
def run_specialist_agents(approaches_text: str, context: str = "", task_description: str = "") -> str:
    """
    複数のアプローチを子エージェントに実行させ、結果を収集するツールです。

    このツールはコーディネーターエージェントから呼び出され、<approach>タグで区切られた
    複数のアプローチを抽出し、それぞれを独立した子エージェント(スペシャリスト)に割り当てます。
    各子エージェントは並列に実行され、その結果は<specialist_report>タグで囲まれた形式で返されます。

    Args:
        approaches_text: <approach>タグで区切られた複数のアプローチを含むテキスト
        context: すべての子エージェントと共有される追加コンテキスト情報（オプション）
        task_description: タスクの全体的な説明（オプション）

    Returns:
        各スペシャリストエージェントからの結果を<specialist_report>タグで囲んだテキスト
    """
    # <approach>タグからアプローチを抽出
    approaches = re.findall(r'<approach>(.*?)</approach>', approaches_text, re.DOTALL)

    if not approaches:
        return "エラー: <approach>タグで囲まれたアプローチが見つかりませんでした。"

    # 並列実行のための関数
    def run_single_agent(approach_idx, approach):
        # LLMモデルとエージェントのインスタンス化
        model = LiteLLMModel(model_id="openai/gpt-4.1")

        # 読み込みツールを含める場合はここに追加
        agent_tools = []  # 必要に応じて子エージェント用のツールを追加

        agent = CodeAgent(
            tools=agent_tools,
            model=model
        )

        # 子エージェント用のプロンプト作成
        prompt = f"""あなたは特定のアプローチに基づいて問題を解決するスペシャリストエージェントです。

タスク: {task_description}

アプローチ#{approach_idx + 1}: {approach}

{context}

あなたの任務：
1. 割り当てられたアプローチに基づいて問題を徹底的に探索する
2. 証拠と論理に基づいて分析を行う
3. 明確で詳細な報告を提供する

報告書の形式：
<report>
アプローチ: [あなたが取ったアプローチの要約]
分析: [詳細な分析内容]
発見: [重要な発見]
限界: [このアプローチの限界]
推奨: [問題解決のための推奨事項]
確信度: [高/中/低] + [その理由]
</report>

報告形式を厳密に守り、詳細な分析を提供してください。"""

        # エージェントの実行
        result = agent.run(prompt)

        # 結果をフォーマット
        formatted_result = f"<specialist_report approach_id=\"{approach_idx + 1}\">\n{result}\n</specialist_report>"
        return formatted_result

    # 並列実行
    results = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=min(len(approaches), 5)) as executor:
        future_to_approach = {
            executor.submit(run_single_agent, i, approach): (i, approach)
            for i, approach in enumerate(approaches)
        }

        for future in concurrent.futures.as_completed(future_to_approach):
            try:
                result = future.result()
                results.append(result)
            except Exception as e:
                idx = future_to_approach[future][0]
                results.append(f"<specialist_report approach_id=\"{idx + 1}\">\nエラー: {str(e)}\n</specialist_report>")

    # 結果をアプローチIDでソート
    sorted_results = sorted(
        results,
        key=lambda x: int(re.search(r'approach_id="(\d+)"', x).group(1))
    )

    # すべての結果を結合
    final_result = "## スペシャリストエージェントからの報告\n\n" + "\n\n".join(sorted_results)
    return final_result


def create_mother_agent_prompt(task: str) -> str:
    """
    指定されたタスクに基づいて、マザーエージェント（コーディネーターエージェント）
    用のプロンプトを生成します。

    Args:
        task: エージェントに実行させたいタスクの説明

    Returns:
        マザーエージェント用のプロンプト
    """
    prompt = f"""
{task}

あなたはコーディネーターエージェント（マザーエージェント）として、このタスクを解決するための指揮を執ります。
あなたの役割は問題を分解し、複数のアプローチを検討し、スペシャリストエージェントを通じて並列に解決策を探ることです。

【重要】常にタスクの元の要求と制約を最優先してください。タスクが特定の数の解決策や特定の形式での回答を求めている場合は、それに正確に従ってください。
例えば「それぞれ2つずつアイデアを提案」「3つの観点から分析」などの要求がある場合、最終的な結論でもその制約を厳守してください。

以下の手順に従ってください：

1. まず問題を分析し、タスクの核となる要求と制約を明確に特定してください。
   - 具体的な成果物の形式（例：「X個のアイデア」「json形式で」など）
   - 解決すべき問題の性質（例：「アイデア創出」「論理的推論」「数学的計算」など）
   - その他の明示的・暗示的な制約（例：使用するデータ、考慮すべき倫理的側面、時間制限など）

2. 問題を分析し、この課題に対する複数の異なるアプローチを考えてください。
   各アプローチは問題の性質に応じて、効果的な解決策を探索できるように設計してください。

3. タスクを解決するための複数のアプローチを考えてください。アプローチの設計には以下の戦略のいずれか、または組み合わせを使用できます：

   a) **視点分担型**：各アプローチが異なる視点や方法論を用いて問題全体にアプローチする
   b) **タスク分担型**：各アプローチが問題の特定の部分や側面に集中する
   c) **段階分担型**：各アプローチが問題解決の異なる段階（分析、アイデア生成、評価など）を担当する
   d) **並列解法型**：各アプローチが同じ問題を異なる解法で解き、結果を比較検証する
   e) **分岐探索型**：各アプローチが決定木の異なる分岐を探索し、可能性のある複数のパスを追跡する
   f) **分解再構築型**：複雑な問題をより小さな管理可能な要素に分解し、各アプローチが特定の要素の分析や解決策を担当した後、それらを統合して全体像やシステム全体の解決策を再構築する

3. 各アプローチを<approach>タグで囲んで提示してください。アプローチの種類を明示し、何をどのように探索するかを具体的に説明してください。

【視点分担型の例】
タスク：「新しいオンライン教育プラットフォームの設計方針を提案する」
<approach>
【視点：学習科学とユーザー体験】認知負荷理論やマルチモーダル学習などの学習科学の原則に基づき、
効果的な学習環境のためのUX/UIガイドラインを開発する。学習者の注意維持と理解度向上のための具体的な設計パターンを特定する。
</approach>
<approach>
【視点：データ駆動型学習】機械学習アルゴリズムを活用して学習者の進捗、スタイル、強み、
弱みを分析し、個別最適化された学習パスを提供するシステム設計を検討する。適応型クイズ、リコメンデーション、
インタラクティブなフィードバックの実装方法を具体化する。
</approach>
<approach>
【視点：社会的学習】協調学習、ピアレビュー、メンターシップを促進する機能設計に焦点を当てる。
学習コミュニティの形成と維持のための仕組みや、知識共有と相互サポートを促進するインセンティブ設計を検討する。
</approach>

【タスク分担型の例】
「現代社会における『孤独感』を軽減するために、個人レベル、コミュニティレベル、社会システムレベルでできる革新的なアイデアを、それぞれ2つずつ提案してください」
<approach>
【担当：個人レベルの解決策】現代人の孤独感に関する心理学的研究と実証データを基に、個人が日常生活で
実践できる革新的な孤独感軽減アプローチを検討する。デジタルとアナログの両面から、自己効力感を高め、
有意義な人間関係を構築するための具体的なアイデアを2つ提案する。
</approach>
<approach>
【担当：コミュニティレベルの解決策】都市設計、ソーシャルネットワーク理論、および成功した
コミュニティビルディングの事例研究を分析する。多様な年齢層や背景を持つ人々をつなぎ、
意味のある交流を促進するコミュニティベースの革新的アプローチを2つ提案する。
</approach>
<approach>
【担当：社会システムレベルの解決策】公共政策、テクノロジーインフラ、および社会規範の観点から
孤独感に対処するシステム的アプローチを探る。社会全体で孤独を軽減するための政策イニシアチブや
技術的ソリューションを2つ提案する。
</approach>

【段階分担型の例】
タスク：「企業の炭素排出量削減戦略の開発」
<approach>
【担当：現状分析と優先課題特定】サプライチェーン全体の排出量分析とホットスポット特定を行う。
原材料調達から最終製品配送までのライフサイクル分析を実施し、排出量の大部分を占める工程やプロセスを特定する。
データ駆動型アプローチで優先的に対処すべき排出源を明確にする。
</approach>
<approach>
【担当：解決策開発と評価】特定されたホットスポットに対する複数の緩和策を開発し、
経済的実現可能性、排出削減効果、実装の難易度などの観点から評価する。再生可能エネルギー導入、
プロセス効率化、材料代替などの具体的な解決策を提案・評価する。
</approach>
<approach>
【担当：実装計画と変革管理】選定された解決策の段階的な導入計画を作成し、組織変革の観点から
実装戦略を立案する。従業員の行動変容を促進するインセンティブ制度、教育プログラム、イニシアチブを
開発し、短期・中期・長期のロードマップを提示する。
</approach>

【並列解法型の例】
タスク：「複雑な確率問題を解く」
<approach>
【解法：ベイズ定理アプローチ】与えられた問題をベイズ定理の枠組みで定式化し、条件付き確率を用いて解く。
事前確率、尤度、事後確率を明確に特定し、段階的に計算を進める。各ステップでの中間結果を明示し、
確率計算の過程を透明化する。
</approach>
<approach>
【解法：確率グラフモデル】問題を確率グラフ（ベイジアンネットワークなど）として表現し、
変数間の依存関係を明示的に可視化する。グラフ上での確率伝播アルゴリズムを適用して解を求め、
各変数のマージナル確率とその導出過程を説明する。
</approach>
<approach>
【解法：モンテカルロシミュレーション】問題設定に基づく確率的なシミュレーションを大量に実行し、
統計的に解を推定する。乱数生成のプロセスと条件の実装方法を詳細に説明し、十分な試行回数での
収束結果とその信頼区間を報告する。
</approach>

【分岐探索型の例】
タスク：「複雑な論理パズルを解く」
<approach>
【分岐：前提条件セットA】パズルの条件を分析し、最初の分岐点として「条件Xが真である」と仮定する。
この仮定のもとで論理的帰結を追跡し、矛盾が生じるか、または解に到達するかを検証する。
解の候補や中間的な結論を明示的に記録する。
</approach>
<approach>
【分岐：前提条件セットB】パズルの条件を分析し、最初の分岐点として「条件Xが偽である」と仮定する。
この仮定のもとで論理的帰結を追跡し、矛盾が生じるか、または解に到達するかを検証する。
解の候補や中間的な結論を明示的に記録する。
</approach>
<approach>
【分岐：構造的アプローチ】パズルの構造的性質（対称性、不変量など）を分析し、
探索空間を効率的に削減する方法を特定する。可能な解の形式に制約を加え、系統的に可能性を排除していく。
</approach>

【サブ問題分解型の例】
タスク：「複雑な最適化問題を解く」
<approach>
【サブ問題：制約条件の分析】問題に含まれるすべての制約条件を特定し、それらの相互作用と
実行可能領域への影響を分析する。特に、厳しい制約や実行可能解の存在に大きく影響する制約を特定し、
その性質を詳細に調査する。
</approach>
<approach>
【サブ問題：目的関数の特性分析】最適化すべき目的関数の数学的性質（凸性、連続性、微分可能性など）を
分析し、適用可能な解法とその効率性を評価する。目的関数の極値や特異点の存在可能性を調査し、
最適化アルゴリズムの選択に影響する要因を特定する。
</approach>
<approach>
【サブ問題：数値解法の実装】選択した最適化アルゴリズム（勾配降下法、ニュートン法、進化的アルゴリズムなど）の
具体的な実装方法を設計し、初期値の選択、収束基準、ステップサイズなどのパラメータを決定する。
アルゴリズムの実行過程と収束性を分析し、解の精度と信頼性を評価する。
</approach>

【分解再構築型の例】
タスク：「大都市Xにおける持続可能な交通システムへの移行計画を策定する」
（注：以下の複数のアプローチ（子エージェント）を段階的に実行することで達成されることを想定しています。まず第1段階で要素分析を行い、次に第2段階でその成果物を基に統合計画の各側面を並列検討します。）

**《第1段階：要素分析と初期提案》**
<approach>
【要素分析：公共交通システム】バス、鉄道、地下鉄などの既存公共交通網の利用状況、効率性、カバレッジを分析する。BRT導入、路線の最適化、接続性向上、オンデマンド交通統合、運賃体系見直し等の改善策を検討し、その効果と実現可能性に関する分析結果と段階的導入計画の**初期提案**を[成果物形式：公共交通分析レポート]として出力する。再生可能エネルギーによる運行への移行可能性も評価に含める。
</approach>
<approach>
【要素分析：道路交通と駐車場管理】自家用車・商用車の交通量、渋滞箇所・原因を分析する。交通流最適化策（スマート信号等）、流入抑制策（ロードプライシング等）、ラストマイル配送効率化、駐車場の最適配置・料金設定、パークアンドライド推進、EV充電インフラ整備に関する分析結果と具体的な**初期提案**を[成果物形式：道路交通分析レポート]として出力する。
</approach>
<approach>
【要素分析：アクティブモビリティ（歩行・自転車）】歩行者空間、自転車道ネットワーク、シェアサイクル等の現状と課題を分析する。インフラ整備（歩行者ゾーン拡大、自転車レーン整備、駐輪場増設等）、利用促進策、関連法規の整備に関する分析結果と具体的な**初期提案**を[成果物形式：アクティブモビリティ分析レポート]として出力する。
</approach>

**《第2段階：統合計画の並列検討》**
第1段階で生成された[公共交通分析レポート]、[道路交通分析レポート]、[アクティブモビリティ分析レポート]を共通の入力情報として受け取った後、統合計画の異なる側面を並行して検討・策定
<approach>
【統合担当：シナジー・トレードオフ分析と施策パッケージ化】提供された各要素の初期提案を基に、施策間の相乗効果（例：公共交通利用促進と駐車規制の連携）と競合・トレードオフ（例：道路空間の再配分）を詳細に分析・評価する。統合による全体最適化の観点から、整合性の取れた複数の施策パッケージ（例：標準ケース、環境重視ケース、経済性重視ケースなど）を具体的に構成し、それぞれの特徴と期待される効果を[成果物形式：施策パッケージ案レポート]として出力する。
</approach>
<approach>
【統合担当：ロードマップ・予算策定】「施策パッケージ案レポート」で提案された各パッケージについて、実現可能性を評価する。それぞれのパッケージに含まれる施策の短期・中期・長期にわたる具体的な実施ロードマップ（マイルストーン含む）と、必要となる概算予算、資金調達の可能性を検討し、[成果物形式：ロードマップ・予算案レポート]として出力する。
</approach>
<approach>
【統合担当：政策・リスク・合意形成戦略】「施策パッケージ案レポート」と「ロードマップ・予算案レポート」を考慮し、各パッケージの実現に必要な法規・条例改正案、インセンティブ・規制策、組織体制を具体化する。潜在的なリスク（技術的、経済的、社会的）を評価し、対応策を検討する。市民、事業者、関連機関など、ステークホルダーとの合意形成を進めるためのコミュニケーション戦略とプロセスを立案し、[成果物形式：政策・リスク・合意形成戦略レポート]として出力する。
</approach>

4. すべてのアプローチを定義したら、run_specialist_agentsツールを使用して、
   各アプローチの専門家エージェントを並列に実行してください。
   ツールの使用方法：
   ```
   各アプローチを<approach>タグで囲んだテキストをrun_specialist_agentsツールに渡す
   ```

5. 専門家エージェントからの報告を受け取ったら、それらを批判的に評価してください。
- 各アプローチの長所と短所を分析する
- 相互に補完しあう洞察や提案を特定する
- 最も効果的な解決策、あるいは複数の解決策を組み合わせた統合的アプローチを選定する

6. 報告の評価後、十分な精度や完全性、包括性に達していないと判断した場合は、以下の方法で追加の探索を行ってください：
   a) これまでの探索結果とその評価を要約し、何が不足しているか、どのような追加探索が必要かを明確にします

   b) 追加の探索アプローチを定義します。これには以下のような内容を含めることができます：
      - 既存のアプローチの深掘り（例：「アプローチ1の〇〇の側面をさらに掘り下げる」）
      - 完全に新しい視点からのアプローチ
      - これまでの複数のアプローチを組み合わせた統合的アプローチ

   c) 追加の探索アプローチも<approach>タグで囲み、以下のようなフォーマットで記述します：

      <approach>
      [コンテキスト: これまでの探索で分かったこと、不足している点、深掘りが必要な側面などの説明]
      [具体的なアプローチの詳細: 何をどのように探索するか、どのような視点や方法論を用いるかなど]
      </approach>

   d) 定義した追加アプローチを含めて、再度run_specialist_agentsツールを呼び出します

   e) この追加探索のプロセスは、十分な品質と包括性が得られるまで、複数回繰り返します

7. 十分な品質の解決策に到達したら、最終的な結論と選ばれた解決策を<conclusion>タグで囲んで提示してください。
   結論には以下を含めるようにしてください：
   - 与えられたタスクに対する最適解（もしくは統合した解）とその理由
   - 各アプローチから採用した重要な要素
   - 実装における留意点や制約条件
   - 必要に応じた次のステップや追加調査の提案
   結論の形式は必ずタスクの元の要求・制約に従う必要があります。

8. 最後に、あなたの思考プロセス全体を振り返り、アプローチの選定や結論に至った
   意思決定プロセスを透明に説明してください。これには以下を含めてください：
   - 初期アプローチの選定理由
   - 追加探索が必要だと判断した基準
   - どのような追加探索を行い、それがどのように結論を強化したか
   - 最終的な統合解決策に至るまでの重要な判断ポイント

すべてのステップにおいて、論理的思考と創造的発想の両方を活用し、
具体的かつ実行可能な提案を目指してください。必要に応じて複数回のスペシャリストエージェント実行を行い、
解決策の品質と精度を高めることを恐れないでください。
"""
    return prompt

def create_agent(model_id="gpt-4.1"):
    model = LiteLLMModel(model_id=model_id)
    mother_agent = CodeAgent(
        tools=[run_specialist_agents],
        model=model
    )
    return mother_agent